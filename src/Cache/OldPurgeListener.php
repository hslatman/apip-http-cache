<?php
/**
 * Author: Herman Slatman
 * Date: 2019-05-08
 * Time: 08:28
 */

namespace App\Cache;

use FOS\HttpCache\SymfonyCache\CacheEvent;
use FOS\HttpCache\SymfonyCache\EventDispatchingHttpCache;
use FOS\HttpCache\SymfonyCache\Events;
use FOS\HttpCache\SymfonyCache\PurgeListener as BasePurgeListener;
use Symfony\Component\HttpKernel\HttpCache\Store;
use Symfony\Component\HttpKernel\HttpCache\StoreInterface;

class OldPurgeListener extends BasePurgeListener
{

    /** @var StoreInterface $store */
    private $store;

    public function __construct(StoreInterface $store = null, array $options = [])
    {
        parent::__construct($options);

        $this->store = $store;
    }

    /**
     * {@inheritdoc}
     */
    public static function getSubscribedEvents()
    {
        return [
            PurgeCacheEvent::PURGE => 'handlePurgeCacheEvent',
        ];
    }

    public function handlePurgeCacheEvent(PurgeCacheEvent $event)
    {

        //dd('here');
        //return parent::handlePurge($event); // TODO: Change the autogenerated stub

//
//        $request = $event->getRequest();
//        if ($this->purgeMethod !== $request->getMethod()) {
//            return;
//        }
//
//        if (!$this->isRequestAllowed($request)) {
//            $event->setResponse(new Response('', 400));
//
//            return;
//        }
//
//        $response = new Response();

            //dd($this->store);

//

        //$store = $event->getKernel()->getStore();

//        // Purge whole cache
//        if ($request->headers->has($this->clearCacheHeader)) {
//            if (!$store instanceof Psr6StoreInterface) {
//                $response->setStatusCode(400);
//                $response->setContent('Store must be an instance of '.Psr6StoreInterface::class.'. Please check your proxy configuration.');
//                $event->setResponse($response);
//
//                return;
//            }
//
//            $store->prune();
//
//            $response->setStatusCode(200, 'Pruned');
//            $event->setResponse($response);
//
//            return;
//        }



//        if ($store->purge($request->getUri())) {
//            $response->setStatusCode(200, 'Purged');
//        } else {
//            $response->setStatusCode(200, 'Not found');
//        }
//        $event->setResponse($response);


        if ($this->store === null) {
            return;
        }

        $this->store->purge('/api/items');

    }
}